{
	"name": "dataflow_test",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceCSVFile",
						"type": "DatasetReference"
					},
					"name": "SourceCSVFile"
				},
				{
					"dataset": {
						"referenceName": "SourceCSVFile",
						"type": "DatasetReference"
					},
					"name": "SourceCSVSecondCopy"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectList"
				},
				{
					"name": "aggregateOnIsActive"
				},
				{
					"name": "selectAllRecords"
				},
				{
					"name": "PerformJoin"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpId as short,",
				"          Name as string,",
				"          Designation as string,",
				"          Salary as integer,",
				"          IsActive as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCSVFile",
				"source(output(",
				"          EmpId as short,",
				"          Name as string,",
				"          Designation as string,",
				"          Salary as integer,",
				"          IsActive as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCSVSecondCopy",
				"SourceCSVFile select(mapColumn(",
				"          EmpId,",
				"          Name,",
				"          Designation,",
				"          Salary,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectList",
				"SelectList aggregate(groupBy(IsActive),",
				"     CountRecords = count(EmpId)) ~> aggregateOnIsActive",
				"SourceCSVSecondCopy select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAllRecords",
				"selectAllRecords, aggregateOnIsActive join(selectAllRecords@IsActive == aggregateOnIsActive@IsActive,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> PerformJoin"
			]
		}
	}
}